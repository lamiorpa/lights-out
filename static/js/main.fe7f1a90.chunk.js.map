{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","target","getAttribute","classes","isLit","className","onClick","pos","Component","getRandomInt","max","Math","floor","random","Board","state","board","constructBoard","nrows","ncols","chanceLightStartsOn","clicks","hasWon","flipCellsAround","setBoard","initializationRepeats","number","i","coord","row","o","push","split","map","Number","y","x","flipCell","flipCellSurroundings","setState","checkWin","repeats","setBoardStage","yindex","trid","key","u","xindex","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fe7f1a90.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe(evt.target.getAttribute('pos'));\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} pos={this.props.pos} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off (false), and O is on(true))\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\n// Miten statea kannattaa käyttää:\n// https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n\nclass Board extends Component {\n\n    static defaultProps = {\n        nrows: 4,\n        ncols: 4,\n        initializationRepeats: 5,\n        chanceLightStartsOn: 0.25\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            board: this.constructBoard(this.props.nrows, this.props.ncols, this.props.chanceLightStartsOn),\n            clicks: 0,\n            hasWon: false\n        };\n        //this.handleCellClick = this.handleCellClick.bind(this);\n        this.flipCellsAround = this.flipCellsAround.bind(this);\n        this.setBoard = this.setBoard.bind(this);\n    }\n\n    // Suoritetaan constructorin toimien jälkeen boardin asettelu, ennen itse sisällön renderöimistä\n    // https://reactjs.org/docs/react-component.html\n    componentDidMount() {\n        this.setBoard(this.props.initializationRepeats);\n    }\n\n\n    setBoardStage(number) {\n\n        let i = 0;\n        do {\n            let coord = `${getRandomInt(this.props.ncols)}-${getRandomInt(this.props.nrows)}`;\n            this.flipCellsAround(coord);\n            i++;\n        } while (i < number);\n    }\n\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n    constructBoard(nrows, ncols) {\n\n        // let board = [];\n        // for (let i = 0; i < nrows; i++) {\n        //     let row = [];\n        //     for (let o = 0; o < ncols; o++) {\n        //         row.push(Math.random() > chanceLightStartsOn ? false : true);\n        //     }\n        //     board.push(row);\n        // }\n\n        let board = [];\n        for (let i = 0; i < nrows; i++) {\n            let row = [];\n            for (let o = 0; o < ncols; o++) {\n                row.push(false);\n            }\n            board.push(row);\n        }\n\n        return board\n    }\n\n    /** handle changing a cell: update board & determine if winner */\n\n    /**\n     * Handles changing of cells to opposites\n     * Determines if the board has been cleared (Victory)\n     * Updates the board\n     * @param {string} coord (e.g. \"2-3\", \"0-1\") \n     */\n    flipCellsAround(coord) {\n\n        let { ncols, nrows } = this.props;\n        // let ncols = this.props.ncols;\n        // let nrows = this.props.nrows;\n        let board = this.state.board;\n        let [y, x] = coord.split(\"-\").map(Number);\n\n        function flipCell(y, x) {\n            // if this coord is actually on board, flip it\n            if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n                board[y][x] = !board[y][x];\n            }\n        }\n        function flipCellSurroundings(y, x) {\n\n            let top = [y + 1, x];\n            let bottom = [y - 1, x];\n            let right = [y, x + 1];\n            let left = [y, x - 1];\n            let sArray = [top, bottom, right, left];\n\n            for (let i of sArray) {\n                // if the surrounding coord os in the board, flip it\n                if (i[1] >= 0 && i[1] < ncols && i[0] >= 0 && i[0] < nrows) {\n                    board[i[0]][i[1]] = !board[i[0]][i[1]];\n                }\n            }\n        }\n\n        flipCell(y, x);\n        flipCellSurroundings(y, x);\n\n        function checkWin(board) {\n            // toinen tapa tehdä loop-break, nimeämällä eri for-loopin tasot\n            // loop1:\n            // for (let i of board) {\n            //     for (let u of i) {\n            //         if (u === true) { break loop1};\n            //     }\n            //     ...\n            // }\n\n            for (let i of board) {\n                for (let u of i) {\n                    if (u === true) { return false };\n                }\n            }\n            return true;\n        }\n\n        // win when every cell is turned off\n        // TODO: determine is the game has been won\n\n        this.setState({\n            board: board,\n            hasWon: checkWin(board)\n        });\n\n    }\n\n    /**\n     * @param {number} repeats (number of clicks pre-made before player interaction)\n     */\n    setBoard(repeats = 5) {\n        this.setBoardStage(repeats);\n    }\n\n    /** Render game board or winning message. */\n\n    render() {\n        return (\n            <div>\n                <h1>Lights out</h1>\n                {this.state.hasWon ?\n                    <h2>Hih hih, voitit pelin <button onClick={this.setBoard}>Reset</button>\n                    </h2>\n                    :\n                    <table className=\"Board\">\n                        <tbody>\n                            {this.state.board.map((i, yindex) => {\n                                let trid = `tr${yindex}`\n                                return <tr key={trid}>\n                                    {i.map((u, xindex) => {\n                                        let coord = `${yindex}-${xindex}`;\n                                        return <Cell\n                                            key={coord}\n                                            pos={coord}\n                                            isLit={u}\n                                            flipCellsAroundMe={this.flipCellsAround}\n                                        />\n                                    })}\n                                </tr>\n                            })}\n                        </tbody>\n                    </table>\n                }\n            </div>\n        );\n\n        // if the game is won, just show a winning msg & render nothing else\n\n        // TODO\n\n        // make table board\n\n        // TODO\n    }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board nrows={3} ncols={3} />\n        <Board />\n        <Board nrows={5} ncols={5} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}